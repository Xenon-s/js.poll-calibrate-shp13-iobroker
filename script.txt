// Abfragen für zigbee device "blitzwolf"
const faktor = 0.834; // Kalibrierwert in Dezimalform
const poll = 10000; // Intervall in millisekunden 


const inst = 'zigbee.0' // -> Pfad zur zigbee Instanz

const arr = [ // hier die Geraete eintragen
    // id: -> Name aus dem zigbee adapter
    // newPath: -> neuer Pfad mit kalibrierten werten
    
    {/* wama */ id: '588e81fffed3904d', newPath: '0_userdata.0.Verbrauch.gerechnet.Wama' },
    {/*trockner*/ id: '842e14fffe3a4bb3', newPath: '0_userdata.0.Verbrauch.gerechnet.Trockner' },
];

/*
    Finger weg!
*/

let timeout = null;

createDP();
intervall();

async function createDP () {
    arr.forEach(async (obj) => {
        let path = ``;
        path = obj.newPath;
        createStateAsync(path, JSON.parse('{"type":"number","unit":"W"}'), async function () {
        });
    });
};

// intervall  <- loop starten und alle X sekunden wieder aufrufen
function intervall() {
    if (timeout != null) {
        clearTimeout(timeout);
        timeout = null;
    };
    setTimeout(() => {
        loop()
        intervall();
    }, poll);
};

/**
* @param {string} id
*/
// daten an zigbee senden
async function getData(id) {

    const data = {
        "id": `${inst}.${id}`,
        "ep": "1", "cid": "haElectricalMeasurement",
        "cmd": "read",
        "cmdType": "foundation",
        "zclData": { "activePower": {} }
    };

    sendTo("zigbee.0", "sendToZigbee", data);
};

// Daten aus array ermitteln und an getData() übergeben
function loop() {
    let i = 0;
    function myLoop() {
        setTimeout(() => {
            getData(arr[i].id)
            i++;
            if (i < arr.length) {
                myLoop();
            };
        }, 500)
    };
    myLoop();
};

// create trigger
arr.forEach(async objTemp => {
    try {
        on({ id: `${inst}.${objTemp.id}.load_power`, change: "any", ack: true }, async obj => {    // Trigger Licht an / aus
            let val = 0
            val = obj.state.val;
            val = val * faktor;
            setStateAsync(objTemp.newPath, val, true)
        });
    } catch (error) {
        console.error(error);
        createDP();
    };
});
